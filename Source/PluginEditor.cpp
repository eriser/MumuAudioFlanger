/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
MumuAudioFlangerAudioProcessorEditor::MumuAudioFlangerAudioProcessorEditor (MumuAudioFlangerAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p), button1("Sine Mod"),button2("Tri Mod")
{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (600, 280);
    LookAndFeel::setDefaultLookAndFeel(&myLookAndFeel);
    
    addAndMakeVisible (liveAudioScroller = new LiveScrollingAudioDisplay());
    liveAudioScroller->setBounds (172, 210, 428, 50);
    liveAudioScroller->clearLiveScrollingAudioDisplay();
    processor.addChangeListener(this);
    
    addAndMakeVisible (CrossOverWindow = new CrossoverComponent());
    CrossOverWindow->setBounds(500, 160, 80, 20);
    
    windowLabel.setEditable(true);
    windowLabel.setText("Sub Bypass", dontSendNotification);
    windowLabel.setColour(juce::Label::textColourId, juce::Colour(255.0f, 255.0f, 255.0f));
    windowLabel.attachToComponent(CrossOverWindow, false);
    windowLabel.setColour(0x1000283, Colour(255.0f,255.0f,255.0f));
    windowLabel.setJustificationType(4);
    windowLabel.addListener(this);
    addAndMakeVisible(windowLabel);
    
    addAndMakeVisible(knob1 = new Slider("Knob - 1"));
    addAndMakeVisible(knob2 = new Slider("Knob - 2"));
    addAndMakeVisible(knob3 = new Slider("Knob - 3"));
    addAndMakeVisible(knob4 = new Slider("Knob - 4"));
    addAndMakeVisible(&button1);
    addAndMakeVisible(&button2);
    
    //this is the ModRate (m_fModRate_ms)
    knob1->setRange(0.0,1.0);
    knob1->setTextBoxStyle(Slider::NoTextBox,false,0,0);
    knob1->setSliderStyle(Slider::RotaryVerticalDrag);
    knob1->setColour(Slider::rotarySliderFillColourId, Colours::grey);
    knob1->setColour(Slider::rotarySliderOutlineColourId, Colour(200,200,200));
    knob1->addListener(this);
    knob1->setBounds(50,28,75,75);
    
    //knob2 // Mod Depth Amount (m_f_moddepth_pct)
    knob2->setRange(0.0,1.0);
    knob2->setTextBoxStyle(Slider::NoTextBox,false,0,0);
    knob2->setSliderStyle(Slider::RotaryVerticalDrag);
    knob2->setColour(Slider::rotarySliderFillColourId, Colours::grey);
    knob2->setColour(Slider::rotarySliderOutlineColourId, Colour(200,200,200));
    knob2->addListener(this);
    knob2->setBounds(150,88,75,75);
    
    //knob3  // this is wet / dry (m_f_WetLevel_pct)
    knob3->setRange(0.0,1.0);
    knob3->setTextBoxStyle(Slider::NoTextBox,false,0,0);
    knob3->setSliderStyle(Slider::RotaryVerticalDrag);
    knob3->setColour(Slider::rotarySliderFillColourId, Colours::grey);
    knob3->setColour(Slider::rotarySliderOutlineColourId, Colour(200,200,200));
    knob3->addListener(this);
    knob3->setValue(0.5,sendNotification);
    knob3->setBounds(250,28,75,75);
    
    //knob4  // this is Feedback (m_f_Feedback_pct)
    knob4->setRange(0.0,1.0);
    knob4->setTextBoxStyle(Slider::NoTextBox,false,0,0);
    knob4->setSliderStyle(Slider::RotaryVerticalDrag);
    knob4->setColour(Slider::rotarySliderFillColourId, Colours::grey);
    knob4->setColour(Slider::rotarySliderOutlineColourId, Colour(200,200,200));
    knob4->addListener(this);
    knob4->setValue(0.5,sendNotification);
    knob4->setBounds(350,88,75,75);
    
        
    //buttons
    button1.setBounds(500,28,80,20);
    button1.addListener(this);
    
    button2.setBounds(500,49,80,20);
    button2.addListener(this);
    
    addMouseListener(this, true);
    
    timerCallback();
    
    startTimer(50);

}

MumuAudioFlangerAudioProcessorEditor::~MumuAudioFlangerAudioProcessorEditor()
{
    processor.removeChangeListener(this);
}

//==============================================================================
void MumuAudioFlangerAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colour(30,30,30));
    g.setGradientFill(ColourGradient(Colour(255,255,255), 0, 0, Colour(211,211,211), 600, 0, false));
    //top rectangle
    g.fillRoundedRectangle(0,6,600,8,2);
    
    g.setGradientFill(ColourGradient(Colour(255,255,255), 0, 280, Colour(211,211,211), 300, 280, false));
    //lower rectangle & text
    //first half
    g.fillRoundedRectangle(0,263,370,8,2);
    //text
    g.setColour(Colour(uint8(211),uint8(211),uint8(211),float(1)));
    g.setFont (Font("Arial", 10, Font::bold + Font::italic));
    g.drawSingleLineText(" Mumu[Audio] | MNML Flanger | CalArts MTIID", 370, 270);
    //second rect
    g.fillRoundedRectangle(568,263,30,8,2);
    
    g.setColour(Colour(uint8(245),uint8(245),uint8(245),float(1)));
    g.setFont (Font("Arial", 12, Font::bold + Font::italic));
    g.drawSingleLineText("Mod-Rate", 62, 120); //this is knob 1
    g.drawSingleLineText("Mod-Depth", 159, 180); //this is knob 2
    g.drawSingleLineText("Dry / Wet", 263, 120); //this is knob 3
    g.drawSingleLineText("Feedback", 362, 180); //this is knob 3
    
    Image Logo = ImageCache::getFromMemory(BinaryData::MumuLight_png, BinaryData::MumuLight_pngSize);
    //g.drawImageAt(Logo, 10, 40);
    g.drawImage(Logo, 10, 218, 65, 35, 0, 0, 115, 65);
    Image MTIID = ImageCache::getFromMemory(BinaryData::MTIID_png, BinaryData::MTIID_pngSize);
    //g.drawImageAt(Logo, 10, 40);
    g.drawImage(MTIID, 83, 220, 85, 30, 0, 0, 190, 95);
    //vert
    g.fillRoundedRectangle(171,208,1,55,0);
    //horizontal
    g.fillRoundedRectangle(0,208,600,1,0);
}

void MumuAudioFlangerAudioProcessorEditor::timerCallback(){
    knob1->setValue(processor.getParameter(MumuAudioFlangerAudioProcessor::knob1Param), NotificationType::dontSendNotification);
    knob2->setValue(processor.getParameter(MumuAudioFlangerAudioProcessor::knob2Param), NotificationType::dontSendNotification);
    knob3->setValue(processor.getParameter(MumuAudioFlangerAudioProcessor::knob3Param), NotificationType::dontSendNotification);
    knob4->setValue(processor.getParameter(MumuAudioFlangerAudioProcessor::knob4Param), NotificationType::dontSendNotification);
    windowReceived0to1 = processor.getParameter(MumuAudioFlangerAudioProcessor::windowComponentParam);
    CrossOverWindow->setCrossoverFreq(jmap(windowReceived0to1, 0.0f, 150.0f));
}

void MumuAudioFlangerAudioProcessorEditor::sliderValueChanged(Slider* sliderThatWasChanged)
{
    if (sliderThatWasChanged == knob1)
    {
        processor.setParameterNotifyingHost(MumuAudioFlangerAudioProcessor::knob1Param,(float)knob1->getValue());
    }
    else if (sliderThatWasChanged == knob2)
    {
        processor.setParameterNotifyingHost(MumuAudioFlangerAudioProcessor::knob2Param,(float)knob2->getValue());
    }
    else if (sliderThatWasChanged == knob3)
    {
        processor.setParameterNotifyingHost(MumuAudioFlangerAudioProcessor::knob3Param,(float)knob3->getValue());
    }
    else if (sliderThatWasChanged == knob4)
    {
        processor.setParameterNotifyingHost(MumuAudioFlangerAudioProcessor::knob4Param,(float)knob4->getValue());
    }
}

void MumuAudioFlangerAudioProcessorEditor::buttonClicked(Button* button)
{
    if (&button1 == button)
    {
        processor.setParameterNotifyingHost(MumuAudioFlangerAudioProcessor::button1Param,(float)1);
        processor.setParameterNotifyingHost(MumuAudioFlangerAudioProcessor::button2Param,(float)0);
    }
    if (&button2 == button)
    {
        processor.setParameterNotifyingHost(MumuAudioFlangerAudioProcessor::button2Param,(float)1);
        processor.setParameterNotifyingHost(MumuAudioFlangerAudioProcessor::button1Param,(float)0);
    }
}

void MumuAudioFlangerAudioProcessorEditor::mouseDown(const MouseEvent & e){
    e.source.enableUnboundedMouseMovement(true);
    if (e.eventComponent == CrossOverWindow)
    {
        e.getEventRelativeTo(CrossOverWindow);
        crossOverWindowMousePosition = e.x;
        if (crossOverWindowMousePosition < 0)
            crossOverWindowMousePosition = 0;
        if (crossOverWindowMousePosition > CrossOverWindow->getWidth())
            crossOverWindowMousePosition = CrossOverWindow->getWidth();
        CrossOverWindow->setCrossoverFreq(crossOverWindowMousePosition);
        windowPosition0to1 = jmap(crossOverWindowMousePosition,0.0f,150.0f,0.0f,1.0f);
        processor.setParameterNotifyingHost(MumuAudioFlangerAudioProcessor::windowComponentParam, windowPosition0to1);
    }
}
void MumuAudioFlangerAudioProcessorEditor::mouseDrag(const MouseEvent & e){
    if (e.eventComponent == CrossOverWindow)
    {
        e.getEventRelativeTo(CrossOverWindow);
        crossOverWindowMousePosition = e.x;
        if (crossOverWindowMousePosition < 0)
            crossOverWindowMousePosition = 0;
        if (crossOverWindowMousePosition > CrossOverWindow->getWidth())
            crossOverWindowMousePosition = CrossOverWindow->getWidth();
        CrossOverWindow->setCrossoverFreq(crossOverWindowMousePosition);
        windowPosition0to1 = jmap(crossOverWindowMousePosition,0.0f,150.0f,0.0f,1.0f);
        processor.setParameterNotifyingHost(MumuAudioFlangerAudioProcessor::windowComponentParam, windowPosition0to1);
    }
}
void MumuAudioFlangerAudioProcessorEditor::changeListenerCallback (ChangeBroadcaster *source){
    liveAudioScroller->processBlock(processor.currentSampleBuffer);
}

void MumuAudioFlangerAudioProcessorEditor::labelTextChanged(Label* labelChanged){
    float frequency = labelChanged->getText().getDoubleValue();
    if (frequency > 22000)
    {
        frequency = 22000;
    }
    if (frequency < 0)
    {
        frequency = 0;
    }
    windowPosition0to1 = jmap(frequency,0.0f,22000.0f,0.0f,1.0f);
    windowLabel.setText((String)frequency, dontSendNotification);
    processor.setParameterNotifyingHost(MumuAudioFlangerAudioProcessor::windowComponentParam, windowPosition0to1);
}



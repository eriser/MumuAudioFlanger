/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "FourPointDelay.h"
#include "SineLFO.h"
#include "SawLFO.h"
#include "TriLFO.h"
#include "MapFunc.h"
#include "pluginconstants.h"


//==============================================================================
/**
*/
class MumuAudioFlangerAudioProcessor  : public AudioProcessor,
                                        public ChangeBroadcaster
{
public:
    //==============================================================================
    MumuAudioFlangerAudioProcessor();
    ~MumuAudioFlangerAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    int getNumParameters() override;
    float getParameter (int index) override;
    void setParameter (int index, float newValue) override;

    const String getParameterName (int index) override;
    const String getParameterText (int index) override;

    const String getInputChannelName (int channelIndex) const override;
    const String getOutputChannelName (int channelIndex) const override;
    bool isInputChannelStereoPair (int index) const override;
    bool isOutputChannelStereoPair (int index) const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;
    
    enum Parameters{
        knob1Param=0,
        knob2Param,
        knob3Param,
        knob4Param,
        button1Param,
        button2Param,
        totalNumParams
    };
    
    //std::queue<float> liveAudioScrollBuffer;
    int lastKnownBufferSize = 0;
    
    AudioSampleBuffer currentSampleBuffer;
    
    

private:
    AudioPlayHead::CurrentPositionInfo lastPosInfo;
    
    
    // raw Vars
    float m_knob1;  //Rate
    float m_knob2;  //Mod Depth
    float m_knob3;  //Dry Wet
    float m_knob4;  //Feedback
    
    float m_sampleRate;
    float m_bufferSize;
    //Delay Param
    float m_fDelayTime;
    float m_fFeedback;
    float m_fWetLevel;
    
    float button1;
    float button2;
    
    FourPointDelay FourPDelayL;
    FourPointDelay FourPDelayR;
    
    SineLFO SineLFOL;
    SineLFO SineLFOR;
    
    TriLFO TriLFOL;
    TriLFO TriLFOR;
    
    float m_fLFORate;
    float m_fModDepth;
    
    const float centerValue = 0.016;
    
    
    
    CBiQuad m_LPF_Left;
    CBiQuad m_LPF_Right;
    
    CBiQuad m_HPF_Left;
    CBiQuad m_HPF_Right;
    
    void calculateLPFCoeffs(float fCuttoffFreq, float sampleRate);
    void calculateHPFCoeffs(float fCuttoffFreq, float sampleRate);
    
    
    
    
    
    
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (MumuAudioFlangerAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
